<?php

namespace ProcessMaker\Core;


class RoutingScreen extends \Derivation
{
    public $convergent = 0;
    public $divergent = 0;
    public $gateway = array('PARALLEL', 'PARALLEL-BY-EVALUATION');
    public $isFirst;

    public function __construct()
    {
        parent::__construct();
        $this->setRegexpTaskTypeToInclude("GATEWAYTOGATEWAY|END-MESSAGE-EVENT|END-EMAIL-EVENT|INTERMEDIATE-CATCH-TIMER-EVENT|INTERMEDIATE-THROW-EMAIL-EVENT");
        $this->flagSanity = true;
    }

    public function mergeDataDerivation($post, $prepareInformation)
    {
        $aDataMerged = array();
        $flagJumpTask = false;
        foreach ($prepareInformation as $key => $nextTask) {
            $aDataMerged[$key] = $nextTask['NEXT_TASK'];
            unset($aDataMerged[$key]['USER_ASSIGNED']);
            $aDataMerged[$key]['DEL_PRIORITY'] = '';
            foreach ($post as $i => $item) {
                if(isset($post[$i]['SOURCE_UID']) && ($nextTask['NEXT_TASK']['TAS_UID'] === $post[$i]['SOURCE_UID'])){
                    $flagJumpTask = true;
                    if($post[$i]['SOURCE_UID'] === $post[$i]['TAS_UID']){
                        $aDataMerged[$key]['USR_UID'] = $post[$i]['USR_UID'];
                    } else {
                        $aDataMerged[$key]['NEXT_ROUTING'][] = $post[$i];
                    }
                }
            }
        }
        //If flagJumpTask is false the template does not Jump Intermediate Events
        if(!$flagJumpTask){
            $aDataMerged = $post;
        }
        return $aDataMerged;
    }

    public function prepareRoutingScreen($arrayData)
    {
        $array = $this->postSanity($this->prepareInformation($arrayData));
        return $array;
    }
    
    public function postSanity($arrayInformation)
    {
        $response = array();
        foreach ($arrayInformation as $index => $element) {
            $this->divergent = 0;
            $this->convergent = 0;
            $this->isFirst = true;
            if ($this->checkElement($this->node[$element['TAS_UID']])) {
                $response[] = $element;
            }
        }
        return array_combine(range(1, count($response)), array_values($response));
        //return parent::postSanity($arrayNextTask); // TODO: Change the autogenerated stub
    }

    public function checkElement($element)
    {
        if (empty($element['in'])) {
            $x = 1;
            return;
        }
        $outElement = $element['out'];
        foreach ($outElement as $index => $outE) {
            if (!$this->isFirst && in_array($outE, $this->gateway)) {
                $this->divergent++;
            }
        }
        $this->isFirst = false;
        $inElement = $element['in'];
        foreach ($inElement as $index => $inE) {
            if ($inE == 'SEC-JOIN') {
                $this->convergent++;
            }
            $this->checkElement($this->node[$index]);
        }
        //$this->checkElement($inElement);
        return $this->convergent == 0 || $this->convergent == $this->divergent;
    }

}